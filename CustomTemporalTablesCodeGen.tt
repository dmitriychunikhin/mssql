<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".sql" #>
<#@ SqlModelDirective processor="SqlModelDirectiveProcessor" #>

<#@ assembly name="System.Core" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Microsoft.SqlServer.Dac" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.SqlServer.Dac.Model" #>

<#
  // disclaimer: this script is a hard edited copy of my script which I use in commercial projects, I didn't test it after editing, so be aware of possible typos
  // author: Dmitrii Chunikhin <chunikhindf@gmail.com>

  // TextTemplatingFileGenerator script for SQL Server database project
  // It uses DacFX model supplied by SQL Server database project and automatically updates structure of generated temporal tables according to the structure of original tables
  // The script generates trigger based custom temporal tables in schema [customtt] (hardcoded) and in filegroup [CUSTOMTT] (also hardcoded)
  // generated tables naming pattern: OriginalTableSchema_OriginalTableName
  // generated tables structure pattern:
  //  customtt_id: bigint default (NEXT VALUE FOR [customtt].[customtt_seq]) NOT NULL -- Primary Key. sequence customtt.customtt_seq must be created by hand
  //  customtt_oper varchar(10) NULL -- dml operation: insert, update, delete
  //  customtt_dt datetime2 -- creation time of a record in this table
  //  customtt_login varchar(50) NULL -- original_login() of a database user
  //  customtt_hostname varchar(50) NULL -- host_name() of a database user
  //  customtt_hostip varchar](20) NULL -- CONNECTIONPROPERTY('client_net_address') of a database user
  //  <original table fields>

  // Data changes tracking algorithm:
  //   triggers generated by this script writes new records in temporal tables only if there are any changes in original table records
  //   thus query update dbo.mytable set field1 = field1 doesn't generate any new records in temporal table
  //   but BEWARE! This algorithm works only for tables having PRIMARY KEY

  List<TSqlObject> allTables = GetAllTables();
  WriteLine(@"--  Tables in DB: {0}", allTables.Count);

  // basic usage
  GenTT(allTables, "someschema.table1");

  // exclude certain fields of original table from generated temporal table
  GenTT(allTables, "someschema.table2", fieldsExcept:"field1,field2");

  // include only certain fields of original table in generated temporal table
  GenTT(allTables, "someschema.table3", fields:"field1,field2,field3");

  // use custom output table name (without schema)
  GenTT(allTables, "someschema.table4", targetTableName="my_new_tt_table4");

#>

<#+
  // tableName - table name in schema.table format
  // fieldsExcept - comma-separated field name list to exclude from generated table
  // fields - comma-separated field name list to include in generated table, if empty -
  // targetTableName - custom output table name (without schema)
  public void GenTT(List<TSqlObject> allTables, string tableName, string fieldsExcept="", string fields="", string targetTableName="")
  {

     TSqlObject table = allTables.Find(x => x.Name.Parts[0]+'.'+x.Name.Parts[1] == tableName);

     var logTableName = String.IsNullOrWhiteSpace(targetTableName)==false ? targetTableName : table.Name.Parts[0] + "_" + table.Name.Parts[1];

     fieldsExcept = System.Text.RegularExpressions.Regex.Replace(fieldsExcept, @"\s+", "");
     fields = System.Text.RegularExpressions.Regex.Replace(fields, @"\s+", "");

     char[] trimChars = {',',' '};

     var columnsStrPK = "";
     var columnsStrPKRelation = "";

     var tablePK = new List<TSqlObject>();
     tablePK.AddRange(table.GetReferencing(PrimaryKeyConstraint.Host, DacQueryScopes.All));
     foreach (var PK in tablePK)
     {
        var columnsPK = new List<TSqlObject>();
        columnsPK.AddRange(PK.GetReferenced(PrimaryKeyConstraint.Columns));
        foreach (var columnPK in columnsPK)
        {
          columnsStrPK += "["+columnPK.Name.Parts[2] + "],";
          columnsStrPKRelation += "a.["+columnPK.Name.Parts[2] + "] = b.["+columnPK.Name.Parts[2] + "] , ";
        }
        columnsStrPK = columnsStrPK.Trim(trimChars);
        columnsStrPKRelation = columnsStrPKRelation.Trim(trimChars).Replace(",", " and ");
        break;
     }

     WriteLine(@"/*");
       WriteLine(@"CUSTOMTT for {0}",table.Name);
     WriteLine(@"*/");
     WriteLine(@"CREATE TABLE [customtt].[{0}]", logTableName);
     WriteLine(@"(");
     WriteLine(@"[customtt_id] [BIGINT] NOT NULL CONSTRAINT [DF_{0}_customtt_id] DEFAULT (NEXT VALUE FOR [customtt].[customtt_seq]) ,", logTableName);
     WriteLine(@"[customtt_oper] [VARCHAR](10) NULL,");
     WriteLine(@"[customtt_dt] [DATETIME] NULL,");
     WriteLine(@"[customtt_login] [VARCHAR](50) NULL,");
     WriteLine(@"[customtt_hostname] [VARCHAR](50) NULL,");
     WriteLine(@"[customtt_hostip] [VARCHAR](20) NULL");


     var columns = new List<TSqlObject>();
     columns.AddRange(table.GetReferenced(Table.Columns));

     var columnsStr = "";
     var columnsStrWithCalc = "";

     foreach (var column in columns)
     {
        if ((","+fieldsExcept+",").IndexOf(","+column.Name.Parts[2]+",", StringComparison.OrdinalIgnoreCase) >= 0)
        {
          continue;
        }

        if (String.IsNullOrWhiteSpace(fields)==false && (","+fields+",").IndexOf(","+column.Name.Parts[2]+",", StringComparison.OrdinalIgnoreCase) == -1)
        {
          continue;
        }

        columnsStrWithCalc = columnsStrWithCalc + "["+column.Name.Parts[2]+"],";

        if (column.GetMetadata<ColumnType>(Column.ColumnType) == ColumnType.ComputedColumn)
        {
          continue;
        }

        var dataType = new List<TSqlObject>();
        dataType.AddRange(column.GetReferenced(Column.DataType));

        var dataTypeName = dataType[0].Name.Parts[0];

        var dataLength = column.GetProperty<int>(Column.Length);
        var dataScale = column.GetProperty<int>(Column.Scale);
        var dataPrecision = column.GetProperty<int>(Column.Precision);
        var dataTypeAdd = "";
        if (dataLength != 0) dataTypeAdd = "("+dataLength.ToString()+")";
        if (dataPrecision != 0) dataTypeAdd = "("+dataPrecision.ToString()+ (dataScale != 0 ? ","+dataScale.ToString() : "") + ")";

        columnsStr = columnsStr + "["+column.Name.Parts[2]+"],";

        WriteLine(@", [{0}] [{1}] {2} NULL", column.Name.Parts[2], dataTypeName, dataTypeAdd);
     }

     columnsStr = columnsStr.Trim(trimChars);
     columnsStrWithCalc = columnsStrWithCalc.Trim(trimChars);



     WriteLine(@", CONSTRAINT [PK_{0}] PRIMARY KEY CLUSTERED ([customtt_id] ASC)", logTableName);
     WriteLine(@") ON [CUSTOMTT];");
     WriteLine(@"GO");
     WriteLine(@"");

     WriteLine(@"CREATE NONCLUSTERED INDEX [IX_{0}_dt] ", logTableName);
     WriteLine(@"ON [customtt].[{0}]([customtt_dt] ASC,[customtt_oper] ASC) ON [CUSTOMTT];", logTableName);
     WriteLine(@"GO");
     WriteLine(@"");


     WriteLine(@"CREATE TRIGGER [{0}].[Trigger_customtt_{2}_update] ON [{0}].[{1}]", table.Name.Parts[0], table.Name.Parts[1], logTableName);
     WriteLine(@"AFTER UPDATE");
     WriteLine(@"AS");
     WriteLine(@"BEGIN");
     WriteLine(@"SET NOCOUNT ON;");
     WriteLine(@"SET XACT_ABORT ON;");
     //WriteLine(@"SET QUOTED_IDENTIFIER ON;");
     WriteLine(@"declare @loginname varchar(50) = isnull(original_login(),'');");
     WriteLine(@"declare @hostname varchar(50) = isnull(host_name(),'');");
     WriteLine(@"declare @hostip varchar(20) = isnull(try_convert(varchar(20),CONNECTIONPROPERTY('client_net_address')),'');");

     string insertSourceStr = "inserted";
     if (String.IsNullOrWhiteSpace(columnsStrPK) == false)
     {
       insertSourceStr = String.Format("(select b.* from (select {1} from (select {3} from inserted union select {3} from deleted) a group by {1} having count(*)>1) a join inserted b on {2}) b", columnsStr, columnsStrPK, columnsStrPKRelation,columnsStrWithCalc);
     }

     WriteLine(@"INSERT INTO [customtt].[{0}] (customtt_oper,customtt_dt,customtt_login,customtt_hostname,customtt_hostip,{1}) select 'update',getdate(),@loginname,@hostname,@hostip, {1} from {2}", logTableName, columnsStr, insertSourceStr);
     WriteLine(@"");
     WriteLine(@"END");
     WriteLine(@"GO");
     WriteLine(@"");

     WriteLine(@"CREATE TRIGGER [{0}].[Trigger_customtt_{2}_insert] ON [{0}].[{1}]", table.Name.Parts[0], table.Name.Parts[1], logTableName);
     WriteLine(@"AFTER INSERT");
     WriteLine(@"AS");
     WriteLine(@"BEGIN");
     WriteLine(@"SET NOCOUNT ON;");
     WriteLine(@"SET XACT_ABORT ON;");
     //WriteLine(@"SET QUOTED_IDENTIFIER ON;");
     WriteLine(@"declare @loginname varchar(50) = isnull(original_login(),'');");
     WriteLine(@"declare @hostname varchar(50) = isnull(host_name(),'');");
     WriteLine(@"declare @hostip varchar(20) = isnull(try_convert(varchar(20),CONNECTIONPROPERTY('client_net_address')),'');");

     WriteLine(@"INSERT INTO [customtt].[{0}] (customtt_oper,customtt_dt,customtt_login,customtt_hostname,customtt_hostip,{1}) select 'insert',getdate(),@loginname,@hostname,@hostip, {1} from inserted", logTableName, columnsStr);
     WriteLine(@"");
     WriteLine(@"END");
     WriteLine(@"GO");
     WriteLine(@"");


     WriteLine(@"CREATE TRIGGER [{0}].[Trigger_customtt_{2}_delete] ON [{0}].[{1}]", table.Name.Parts[0], table.Name.Parts[1], logTableName);
     WriteLine(@"AFTER DELETE");
     WriteLine(@"AS");
     WriteLine(@"BEGIN");
     WriteLine(@"SET NOCOUNT ON;");
     WriteLine(@"SET XACT_ABORT ON;");
     //WriteLine(@"SET QUOTED_IDENTIFIER ON;");
     WriteLine(@"declare @loginname varchar(50) = isnull(original_login(),'');");
     WriteLine(@"declare @hostname varchar(50) = isnull(host_name(),'');");
     WriteLine(@"declare @hostip varchar(20) = isnull(try_convert(varchar(20),CONNECTIONPROPERTY('client_net_address')),'');");

     WriteLine(@"INSERT INTO [customtt].[{0}] (customtt_oper,customtt_dt,customtt_login,customtt_hostname,customtt_hostip,{1}) select 'delete',getdate(),@loginname,@hostname,@hostip, {1} from deleted", logTableName, columnsStr);
     WriteLine(@"");
     WriteLine(@"END");
     WriteLine(@"GO");
     WriteLine(@"");
  }

#>

<#+
  public List<TSqlObject> GetAllTables()
  {
      List<TSqlObject> allTables = new List<TSqlObject>();

    //return allTables;

      // This model represents the last successfully compiled dacpac, not the model in memory.  To
         // get the latest information about your schema make sure to compile your project prior to
         // executing the text template.  The model is of type Microsoft.SqlServer.Dac.Model.TSqlModel.
    var model = Model;
    if (model != null)
    {
          var tables = Model.GetObjects(DacQueryScopes.All, ModelSchema.Table);
          if (tables != null)
          {
              allTables.AddRange(tables);
          }
    }
      return allTables;
  }

#>
